{
  "language": "Solidity",
  "sources": {
    "contracts/external/MockOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.6;\r\n\r\nimport \"@chainlink/contracts/src/v0.6/LinkTokenReceiver.sol\";\r\nimport \"@chainlink/contracts/src/v0.6/interfaces/ChainlinkRequestInterface.sol\";\r\nimport \"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\";\r\nimport \"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\";\r\n\r\n/**\r\n * @title The Chainlink Mock Oracle contract\r\n * @notice Chainlink smart contract developers can use this to test their contracts\r\n */\r\ncontract MockOracle is ChainlinkRequestInterface, LinkTokenReceiver {\r\n  using SafeMathChainlink for uint256;\r\n\r\n  uint256 public constant EXPIRY_TIME = 5 minutes;\r\n  uint256 private constant MINIMUM_CONSUMER_GAS_LIMIT = 400000;\r\n\r\n  struct Request {\r\n    address callbackAddr;\r\n    bytes4 callbackFunctionId;\r\n  }\r\n\r\n  LinkTokenInterface internal LinkToken;\r\n  mapping(bytes32 => Request) private commitments;\r\n\r\n  event OracleRequest(\r\n    bytes32 indexed specId,\r\n    address requester,\r\n    bytes32 requestId,\r\n    uint256 payment,\r\n    address callbackAddr,\r\n    bytes4 callbackFunctionId,\r\n    uint256 cancelExpiration,\r\n    uint256 dataVersion,\r\n    bytes data\r\n  );\r\n\r\n  event CancelOracleRequest(bytes32 indexed requestId);\r\n\r\n  /**\r\n   * @notice Deploy with the address of the LINK token\r\n   * @dev Sets the LinkToken address for the imported LinkTokenInterface\r\n   * @param _link The address of the LINK token\r\n   */\r\n  constructor(address _link) public {\r\n    LinkToken = LinkTokenInterface(_link); // external but already deployed and unalterable\r\n  }\r\n\r\n  /**\r\n   * @notice Creates the Chainlink request\r\n   * @dev Stores the hash of the params as the on-chain commitment for the request.\r\n   * Emits OracleRequest event for the Chainlink node to detect.\r\n   * @param _sender The sender of the request\r\n   * @param _payment The amount of payment given (specified in wei)\r\n   * @param _specId The Job Specification ID\r\n   * @param _callbackAddress The callback address for the response\r\n   * @param _callbackFunctionId The callback function ID for the response\r\n   * @param _nonce The nonce sent by the requester\r\n   * @param _dataVersion The specified data version\r\n   * @param _data The CBOR payload of the request\r\n   */\r\n  function oracleRequest(\r\n    address _sender,\r\n    uint256 _payment,\r\n    bytes32 _specId,\r\n    address _callbackAddress,\r\n    bytes4 _callbackFunctionId,\r\n    uint256 _nonce,\r\n    uint256 _dataVersion,\r\n    bytes calldata _data\r\n  ) external override onlyLINK checkCallbackAddress(_callbackAddress) {\r\n    bytes32 requestId = keccak256(abi.encodePacked(_sender, _nonce));\r\n    require(commitments[requestId].callbackAddr == address(0), \"Must use a unique ID\");\r\n    // solhint-disable-next-line not-rely-on-time\r\n    uint256 expiration = now.add(EXPIRY_TIME);\r\n\r\n    commitments[requestId] = Request(_callbackAddress, _callbackFunctionId);\r\n\r\n    emit OracleRequest(\r\n      _specId,\r\n      _sender,\r\n      requestId,\r\n      _payment,\r\n      _callbackAddress,\r\n      _callbackFunctionId,\r\n      expiration,\r\n      _dataVersion,\r\n      _data\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Called by the Chainlink node to fulfill requests\r\n   * @dev Given params must hash back to the commitment stored from `oracleRequest`.\r\n   * Will call the callback address' callback function without bubbling up error\r\n   * checking in a `require` so that the node can get paid.\r\n   * @param _requestId The fulfillment request ID that must match the requester's\r\n   * @param _data The data to return to the consuming contract\r\n   * @return Status if the external call was successful\r\n   */\r\n  function fulfillOracleRequest(bytes32 _requestId, bytes32 _data)\r\n    external\r\n    isValidRequest(_requestId)\r\n    returns (bool)\r\n  {\r\n    Request memory req = commitments[_requestId];\r\n    delete commitments[_requestId];\r\n    require(gasleft() >= MINIMUM_CONSUMER_GAS_LIMIT, \"Must provide consumer enough gas\");\r\n    // All updates to the oracle's fulfillment should come before calling the\r\n    // callback(addr+functionId) as it is untrusted.\r\n    // See: https://solidity.readthedocs.io/en/develop/security-considerations.html#use-the-checks-effects-interactions-pattern\r\n    (bool success, ) = req.callbackAddr.call(\r\n      abi.encodeWithSelector(req.callbackFunctionId, _requestId, _data)\r\n    ); // solhint-disable-line avoid-low-level-calls\r\n    return success;\r\n  }\r\n\r\n  /**\r\n   * @notice Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK\r\n   * sent for the request back to the requester's address.\r\n   * @dev Given params must hash to a commitment stored on the contract in order for the request to be valid\r\n   * Emits CancelOracleRequest event.\r\n   * @param _requestId The request ID\r\n   * @param _payment The amount of payment given (specified in wei)\r\n   * @param _expiration The time of the expiration for the request\r\n   */\r\n  function cancelOracleRequest(\r\n    bytes32 _requestId,\r\n    uint256 _payment,\r\n    bytes4,\r\n    uint256 _expiration\r\n  ) external override {\r\n    require(commitments[_requestId].callbackAddr != address(0), \"Must use a unique ID\");\r\n    // solhint-disable-next-line not-rely-on-time\r\n    require(_expiration <= now, \"Request is not expired\");\r\n\r\n    delete commitments[_requestId];\r\n    emit CancelOracleRequest(_requestId);\r\n\r\n    assert(LinkToken.transfer(msg.sender, _payment));\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the address of the LINK token\r\n   * @dev This is the public implementation for chainlinkTokenAddress, which is\r\n   * an internal method of the ChainlinkClient contract\r\n   */\r\n  function getChainlinkToken() public view override returns (address) {\r\n    return address(LinkToken);\r\n  }\r\n\r\n  // MODIFIERS\r\n\r\n  /**\r\n   * @dev Reverts if request ID does not exist\r\n   * @param _requestId The given request ID to check in stored `commitments`\r\n   */\r\n  modifier isValidRequest(bytes32 _requestId) {\r\n    require(commitments[_requestId].callbackAddr != address(0), \"Must have a valid requestId\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if the callback address is the LINK token\r\n   * @param _to The callback address\r\n   */\r\n  modifier checkCallbackAddress(address _to) {\r\n    require(_to != address(LinkToken), \"Cannot callback to LINK\");\r\n    _;\r\n  }\r\n}"
    },
    "@chainlink/contracts/src/v0.6/LinkTokenReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nabstract contract LinkTokenReceiver {\n\n  bytes4 constant private ORACLE_REQUEST_SELECTOR = 0x40429946;\n  uint256 constant private SELECTOR_LENGTH = 4;\n  uint256 constant private EXPECTED_REQUEST_WORDS = 2;\n  uint256 constant private MINIMUM_REQUEST_LENGTH = SELECTOR_LENGTH + (32 * EXPECTED_REQUEST_WORDS);\n  /**\n   * @notice Called when LINK is sent to the contract via `transferAndCall`\n   * @dev The data payload's first 2 words will be overwritten by the `_sender` and `_amount`\n   * values to ensure correctness. Calls oracleRequest.\n   * @param _sender Address of the sender\n   * @param _amount Amount of LINK sent (specified in wei)\n   * @param _data Payload of the transaction\n   */\n  function onTokenTransfer(\n    address _sender,\n    uint256 _amount,\n    bytes memory _data\n  )\n    public\n    onlyLINK\n    validRequestLength(_data)\n    permittedFunctionsForLINK(_data)\n  {\n    assembly {\n      // solhint-disable-next-line avoid-low-level-calls\n      mstore(add(_data, 36), _sender) // ensure correct sender is passed\n      // solhint-disable-next-line avoid-low-level-calls\n      mstore(add(_data, 68), _amount)    // ensure correct amount is passed\n    }\n    // solhint-disable-next-line avoid-low-level-calls\n    (bool success, ) = address(this).delegatecall(_data); // calls oracleRequest\n    require(success, \"Unable to create request\");\n  }\n\n  function getChainlinkToken() public view virtual returns (address);\n\n  /**\n   * @dev Reverts if not sent from the LINK token\n   */\n  modifier onlyLINK() {\n    require(msg.sender == getChainlinkToken(), \"Must use LINK token\");\n    _;\n  }\n\n  /**\n   * @dev Reverts if the given data does not begin with the `oracleRequest` function selector\n   * @param _data The data payload of the request\n   */\n  modifier permittedFunctionsForLINK(bytes memory _data) {\n    bytes4 funcSelector;\n    assembly {\n      // solhint-disable-next-line avoid-low-level-calls\n      funcSelector := mload(add(_data, 32))\n    }\n    require(funcSelector == ORACLE_REQUEST_SELECTOR, \"Must use whitelisted functions\");\n    _;\n  }\n\n  /**\n   * @dev Reverts if the given payload is less than needed to create a request\n   * @param _data The request payload\n   */\n  modifier validRequestLength(bytes memory _data) {\n    require(_data.length >= MINIMUM_REQUEST_LENGTH, \"Invalid request length\");\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.6/interfaces/ChainlinkRequestInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ninterface ChainlinkRequestInterface {\n  function oracleRequest(\n    address sender,\n    uint256 requestPrice,\n    bytes32 serviceAgreementID,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 dataVersion,\n    bytes calldata data\n  ) external;\n\n  function cancelOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    bytes4 callbackFunctionId,\n    uint256 expiration\n  ) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n  function approve(address spender, uint256 value) external returns (bool success);\n  function balanceOf(address owner) external view returns (uint256 balance);\n  function decimals() external view returns (uint8 decimalPlaces);\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n  function name() external view returns (string memory tokenName);\n  function symbol() external view returns (string memory tokenSymbol);\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n  function transfer(address to, uint256 value) external returns (bool success);\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\n}\n"
    },
    "@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathChainlink {\n  /**\n    * @dev Returns the addition of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `+` operator.\n    *\n    * Requirements:\n    * - Addition cannot overflow.\n    */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, \"SafeMath: addition overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the subtraction of two unsigned integers, reverting on\n    * overflow (when the result is negative).\n    *\n    * Counterpart to Solidity's `-` operator.\n    *\n    * Requirements:\n    * - Subtraction cannot overflow.\n    */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a, \"SafeMath: subtraction overflow\");\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the multiplication of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `*` operator.\n    *\n    * Requirements:\n    * - Multiplication cannot overflow.\n    */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the integer division of two unsigned integers. Reverts on\n    * division by zero. The result is rounded towards zero.\n    *\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n    * uses an invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    * - The divisor cannot be zero.\n    */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b > 0, \"SafeMath: division by zero\");\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n    * Reverts when dividing by zero.\n    *\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\n    * invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    * - The divisor cannot be zero.\n    */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0, \"SafeMath: modulo by zero\");\n    return a % b;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}