{
  "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lotteryData",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "alreadyEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "invalidFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "invalidValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lotteryEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lotteryFull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lotteryNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "onlyLotteryManagerAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "onlyRaffleOwnerAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "playersNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ticketCostNotCorrect",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "LotteryCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "NewLotteryPlayer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "RandomnessRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "WinnerDeclared",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllLotteryIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "getLotteryDetails",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "pickWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_revokeLotteryOwner",
          "type": "address"
        }
      ],
      "name": "revokeLotteryOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_revokeRaffleOwner",
          "type": "address"
        }
      ],
      "name": "revokeRaffleOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_requestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newLotteryOwner",
          "type": "address"
        }
      ],
      "name": "setLotteryOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newRaffleOwner",
          "type": "address"
        }
      ],
      "name": "setRaffleOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryTicketPrice",
          "type": "uint256"
        }
      ],
      "name": "startLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd8d94aee9984ccb45fb7d39d8f650778a9031e1fb47d8c2d7a8fbc7e916ecf90",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
    "transactionIndex": 0,
    "gasUsed": "2847488",
    "logsBloom": "0x
    "blockHash": "0x211431cfb3b912b8e7866c77cce28d915e1f5f462e3d3976d207160eee76cd6d",
    "transactionHash": "0xd8d94aee9984ccb45fb7d39d8f650778a9031e1fb47d8c2d7a8fbc7e916ecf90",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7,
        "transactionHash": "0xd8d94aee9984ccb45fb7d39d8f650778a9031e1fb47d8c2d7a8fbc7e916ecf90",
        "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x211431cfb3b912b8e7866c77cce28d915e1f5f462e3d3976d207160eee76cd6d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 7,
        "transactionHash": "0xd8d94aee9984ccb45fb7d39d8f650778a9031e1fb47d8c2d7a8fbc7e916ecf90",
        "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xaba526aa14aa019b3e9fc425fcea908c5483c11b6e4c89de392165936eeef19d",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x211431cfb3b912b8e7866c77cce28d915e1f5f462e3d3976d207160eee76cd6d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 7,
        "transactionHash": "0xd8d94aee9984ccb45fb7d39d8f650778a9031e1fb47d8c2d7a8fbc7e916ecf90",
        "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9da416cc6ebbbfd2882d16e0e182d3973d28c8cb8c4dda745ee5d41218892f4d",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x211431cfb3b912b8e7866c77cce28d915e1f5f462e3d3976d207160eee76cd6d"
      }
    ],
    "blockNumber": 7,
    "cumulativeGasUsed": "2847488",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f3",
    "1",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707"
  ],
  "numDeployments": 1,
  "solcInputHash": "b2f77086c4da154e2d2b775615d8b7fc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lotteryData\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"alreadyEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"invalidFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"invalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lotteryEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lotteryFull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lotteryNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"onlyLotteryManagerAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"onlyRaffleOwnerAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"playersNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ticketCostNotCorrect\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LotteryCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NewLotteryPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RandomnessRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"WinnerDeclared\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllLotteryIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"getLotteryDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"pickWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_revokeLotteryOwner\",\"type\":\"address\"}],\"name\":\"revokeLotteryOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_revokeRaffleOwner\",\"type\":\"address\"}],\"name\":\"revokeRaffleOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLotteryOwner\",\"type\":\"address\"}],\"name\":\"setLotteryOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRaffleOwner\",\"type\":\"address\"}],\"name\":\"setRaffleOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryTicketPrice\",\"type\":\"uint256\"}],\"name\":\"startLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"./LotteryData.sol\\\";\\r\\n\\r\\ncontract Lottery is VRFConsumerBaseV2, AccessControl{\\r\\n    VRFCoordinatorV2Interface COORDINATOR;\\r\\n    LinkTokenInterface LINKTOKEN;\\r\\n    LotteryData LOTTERY_DATA;\\r\\n\\r\\n    // Set Lottery Roles \\r\\n    bytes32 private constant LOTTERY_ADMIN = keccak256(\\\"LOTTERY_ADMIN\\\");\\r\\n    bytes32 private constant RAFFLE_OWNER = keccak256(\\\"RAFFLE_OWNER\\\");\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    Counters.Counter private lotteryId;\\r\\n\\r\\n    mapping(uint256 => uint256) private lotteryRandomnessRequest;\\r\\n    bytes32 private keyHash;\\r\\n    uint64 immutable s_subscriptionId;\\r\\n    uint16 immutable requestConfirmations = 3;\\r\\n    uint32 immutable callbackGasLimit = 100000;\\r\\n    uint256 public s_requestId;\\r\\n\\r\\n    event RandomnessRequested(uint256,uint256);\\r\\n    \\r\\n    //To emit data which will contain the requestId-from chainlink vrf, lotteryId, winnder address\\r\\n    event WinnerDeclared(uint256 ,uint256,address);\\r\\n\\r\\n    //To emit data which will contain the lotteryId, address of new-player & new Price Pool\\r\\n    event NewLotteryPlayer(uint256, address, uint256);\\r\\n\\r\\n    //To emit data which will contain the id of newly created lottery\\r\\n    event LotteryCreated(uint256, address);\\r\\n\\r\\n\\r\\n    //custom Errors\\r\\n    error invalidValue();\\r\\n    error invalidFee();\\r\\n    error lotteryNotActive();\\r\\n    error lotteryFull();\\r\\n    error alreadyEntered();\\r\\n    error lotteryEnded();\\r\\n    error playersNotFound();\\r\\n    error onlyLotteryManagerAllowed();\\r\\n    error ticketCostNotCorrect();\\r\\n    error onlyRaffleOwnerAllowed();\\r\\n    error Raffle__TransferFailed();\\r\\n\\r\\n     constructor(\\r\\n        bytes32 _keyHash,\\r\\n        uint64 subscriptionId, \\r\\n        address _vrfCoordinator, \\r\\n        address _link,\\r\\n        address _lotteryData\\r\\n        ) VRFConsumerBaseV2(_vrfCoordinator){\\r\\n        lotteryId.increment();\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _grantRole(LOTTERY_ADMIN, msg.sender);\\r\\n        _grantRole(RAFFLE_OWNER, msg.sender);\\r\\n        COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\\r\\n        LINKTOKEN = LinkTokenInterface(_link);\\r\\n        s_subscriptionId = subscriptionId;\\r\\n        keyHash = _keyHash;\\r\\n        LOTTERY_DATA = LotteryData(_lotteryData);\\r\\n    }\\r\\n\\r\\n    /*@title this functions set the roles for lottery\\r\\n    */\\r\\n    function setLotteryOwner(address _newLotteryOwner) public onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _grantRole(RAFFLE_OWNER, _newLotteryOwner);\\r\\n    }\\r\\n\\r\\n    function setRaffleOwner(address _newRaffleOwner) public onlyRole(LOTTERY_ADMIN) onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _grantRole(RAFFLE_OWNER, _newRaffleOwner);\\r\\n    }\\r\\n\\r\\n    function revokeRaffleOwner(address _revokeRaffleOwner) public onlyRole(LOTTERY_ADMIN) onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _revokeRole(RAFFLE_OWNER, _revokeRaffleOwner);\\r\\n    }\\r\\n\\r\\n    function revokeLotteryOwner(address _revokeLotteryOwner) public onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _revokeRole(RAFFLE_OWNER, _revokeLotteryOwner);\\r\\n    }\\r\\n\\r\\n    function getAllLotteryIds() public view returns(uint256[] memory){\\r\\n        return LOTTERY_DATA.getAllLotteryIds();\\r\\n    }\\r\\n\\r\\n    function startLottery(uint256 _lotteryTicketPrice) public payable onlyRole(RAFFLE_OWNER) {\\r\\n        LOTTERY_DATA.addLotteryData(lotteryId.current(), msg.sender);\\r\\n        lotteryId.increment();\\r\\n        LOTTERY_DATA.setLotteryTicketPrice(_lotteryTicketPrice);\\r\\n        emit LotteryCreated(lotteryId.current(), msg.sender);\\r\\n    }\\r\\n\\r\\n    function enterLottery(uint256 _lotteryId, uint256 _count) public payable {\\r\\n        (address owner,\\r\\n        uint256 Id,\\r\\n        uint256 ticketPrice, \\r\\n        uint256 prizePool, \\r\\n        address[] memory players, \\r\\n        address winner, \\r\\n        bool isFinished) = LOTTERY_DATA.getLottery(_lotteryId);\\r\\n        if(isFinished) revert lotteryNotActive();\\r\\n        if(msg.value < LOTTERY_DATA.lotteryTicketPrice() * _count) revert invalidFee();\\r\\n        uint256 i = 0;\\r\\n        for(i = 0; i < _count; i++){\\r\\n            uint256  updatedPricePool = prizePool + LOTTERY_DATA.lotteryTicketPrice();\\r\\n            LOTTERY_DATA.addPlayerToLottery(_lotteryId, updatedPricePool, msg.sender);\\r\\n            emit NewLotteryPlayer(_lotteryId, msg.sender, updatedPricePool);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pickWinner(uint256 _lotteryId) public onlyRole(RAFFLE_OWNER) {\\r\\n\\r\\n        if(LOTTERY_DATA.isLotteryFinished(_lotteryId)) revert lotteryEnded();\\r\\n        if(LOTTERY_DATA.getLotteryOwner(_lotteryId) != msg.sender) revert onlyRaffleOwnerAllowed();\\r\\n\\r\\n        address[] memory p = LOTTERY_DATA.getLotteryPlayers(_lotteryId);\\r\\n        if(p.length == 1) {\\r\\n            if(p[0] == address(0)) revert playersNotFound();\\r\\n            //require(p[0] != address(0), \\\"no_players_found\\\");\\r\\n            LOTTERY_DATA.setWinnerForLottery(_lotteryId, 0);\\r\\n            payable(p[0]).transfer(address(this).balance);\\r\\n            emit WinnerDeclared(0,_lotteryId,p[0]);\\r\\n        } else {\\r\\n            //LINK is from VRFConsumerBase\\r\\n            s_requestId = COORDINATOR.requestRandomWords(\\r\\n                keyHash,\\r\\n                s_subscriptionId,\\r\\n                requestConfirmations,\\r\\n                callbackGasLimit,\\r\\n                1 // number of random numbers\\r\\n            );\\r\\n            lotteryRandomnessRequest[s_requestId] = _lotteryId;\\r\\n            emit RandomnessRequested(s_requestId,_lotteryId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomness) internal override{\\r\\n        uint256 _lotteryId = lotteryRandomnessRequest[requestId];\\r\\n        address[] memory allPlayers = LOTTERY_DATA.getLotteryPlayers(_lotteryId);\\r\\n        uint256 winnerIndex = randomness[0].mod(allPlayers.length);\\r\\n        LOTTERY_DATA.setWinnerForLottery(_lotteryId, winnerIndex);\\r\\n        delete lotteryRandomnessRequest[requestId];\\r\\n        uint256 winPool = (address(this).balance * 80) / 100;\\r\\n        (bool success, ) = payable(allPlayers[winnerIndex]).call{value: winPool}(\\\"\\\");\\r\\n        // require(success, \\\"Transfer failed\\\");\\r\\n        if (!success) {\\r\\n            revert Raffle__TransferFailed();\\r\\n        }\\r\\n        emit WinnerDeclared(requestId,_lotteryId,allPlayers[winnerIndex]);\\r\\n    }\\r\\n\\r\\n    function getLotteryDetails(uint256 _lotteryId) public view returns(\\r\\n        address,\\r\\n        uint256,\\r\\n        uint256,\\r\\n        uint256 ,\\r\\n        address[] memory,\\r\\n        address ,\\r\\n        bool\\r\\n        ){\\r\\n            return LOTTERY_DATA.getLottery(_lotteryId);\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xdae5c36a3ccfaff2bee5d1de4532404403614015826bcc1fd714361be16cc994\",\"license\":\"MIT\"},\"contracts/LotteryData.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n\\r\\ncontract LotteryData {\\r\\n\\r\\n    struct LotteryInfo{\\r\\n        address owner;\\r\\n        uint256 lotteryId;\\r\\n        uint256 ticketPrice;\\r\\n        uint256 prizePool;\\r\\n        address[] players;\\r\\n        address winner;\\r\\n        bool isFinished;\\r\\n    }\\r\\n    mapping(uint256 => LotteryInfo) public lotteries;\\r\\n\\r\\n    uint256[] public allLotteries;\\r\\n\\r\\n    uint256 public lotteryTicketPrice = 0.02 ether;\\r\\n\\r\\n    address private manager;\\r\\n    bool private isLotteryContractSet;\\r\\n    address private lotteryContract;\\r\\n    constructor(){\\r\\n        manager = msg.sender;\\r\\n    }\\r\\n\\r\\n    error lotteryNotFound();\\r\\n    error onlyLotteryManagerAllowed();\\r\\n    error actionNotAllowed();\\r\\n\\r\\n\\r\\n    modifier onlyManager(){\\r\\n        if(msg.sender != manager) revert onlyLotteryManagerAllowed();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyLoterryContract(){\\r\\n        if(!isLotteryContractSet) revert actionNotAllowed();\\r\\n        if(msg.sender != lotteryContract) revert onlyLotteryManagerAllowed();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function updateLotteryContract(address _lotteryContract) external onlyManager{\\r\\n        isLotteryContractSet = true;\\r\\n        lotteryContract = _lotteryContract;\\r\\n    }\\r\\n\\r\\n    function getAllLotteryIds() external view returns(uint256[] memory){\\r\\n        return allLotteries;\\r\\n    }\\r\\n\\r\\n\\r\\n    function addLotteryData(uint256 _lotteryId, address _owner) external onlyLoterryContract{\\r\\n        LotteryInfo memory lottery = LotteryInfo({\\r\\n            owner: _owner,\\r\\n            lotteryId: _lotteryId,\\r\\n            ticketPrice: lotteryTicketPrice,\\r\\n            prizePool: 0,\\r\\n            players: new address[](0),\\r\\n            winner: address(0),\\r\\n            isFinished: false\\r\\n        });\\r\\n        lotteries[_lotteryId] = lottery;\\r\\n        allLotteries.push(_lotteryId);\\r\\n    }\\r\\n\\r\\n    function addPlayerToLottery(uint256 _lotteryId, \\r\\n    uint256 _updatedPricePool, \\r\\n    address _player) external onlyLoterryContract{\\r\\n        LotteryInfo storage lottery = lotteries[_lotteryId];\\r\\n        if(lottery.lotteryId == 0){\\r\\n            revert lotteryNotFound();\\r\\n        }\\r\\n        lottery.players.push(_player);\\r\\n        lottery.prizePool = _updatedPricePool;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getLotteryPlayers(uint256 _lotteryId) public view returns(address[] memory) {\\r\\n        LotteryInfo memory tmpLottery = lotteries[_lotteryId];\\r\\n        if(tmpLottery.lotteryId == 0){\\r\\n            revert lotteryNotFound();\\r\\n        }\\r\\n        return tmpLottery.players;\\r\\n    }\\r\\n\\r\\n    function getLotteryOwner(uint256 _lotteryId) public view returns(address) {\\r\\n        LotteryInfo memory tmpLottery = lotteries[_lotteryId];\\r\\n        if(tmpLottery.lotteryId == 0){\\r\\n            revert lotteryNotFound();\\r\\n        }\\r\\n        return tmpLottery.owner;\\r\\n    }\\r\\n\\r\\n    function isLotteryFinished(uint256 _lotteryId) public view returns(bool){\\r\\n        LotteryInfo memory tmpLottery = lotteries[_lotteryId];\\r\\n         if(tmpLottery.lotteryId == 0){\\r\\n            revert lotteryNotFound();\\r\\n        }\\r\\n        return tmpLottery.isFinished;\\r\\n    }\\r\\n\\r\\n    function getLotteryPlayerLength(uint256 _lotteryId) public view returns(uint256){\\r\\n        LotteryInfo memory tmpLottery = lotteries[_lotteryId];\\r\\n         if(tmpLottery.lotteryId == 0){\\r\\n            revert lotteryNotFound();\\r\\n        }\\r\\n        return tmpLottery.players.length;\\r\\n    }\\r\\n\\r\\n    function getLottery(uint256 _lotteryId) external view returns(\\r\\n        address,\\r\\n        uint256,\\r\\n        uint256,\\r\\n        uint256 ,\\r\\n        address[] memory,\\r\\n        address ,\\r\\n        bool\\r\\n        ){\\r\\n            LotteryInfo memory tmpLottery = lotteries[_lotteryId];\\r\\n            if(tmpLottery.lotteryId == 0){\\r\\n                revert lotteryNotFound();\\r\\n            }\\r\\n            return (\\r\\n                tmpLottery.owner,\\r\\n                tmpLottery.lotteryId,\\r\\n                tmpLottery.ticketPrice,\\r\\n                tmpLottery.prizePool,\\r\\n                tmpLottery.players,\\r\\n                tmpLottery.winner,\\r\\n                tmpLottery.isFinished\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function setWinnerForLottery(uint256 _lotteryId, uint256 _winnerIndex) external onlyLoterryContract {\\r\\n        LotteryInfo storage lottery = lotteries[_lotteryId];\\r\\n        if(lottery.lotteryId == 0){\\r\\n            revert lotteryNotFound();\\r\\n        }\\r\\n        lottery.isFinished = true;\\r\\n        lottery.winner = lottery.players[_winnerIndex];\\r\\n    }\\r\\n\\r\\n    function setLotteryTicketPrice(uint256 _ticketPrice) external {\\r\\n        lotteryTicketPrice = _ticketPrice;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x6b26b0841fc4ce88254375f708c420056cdfc52968143b2baaf4274c5f4966cf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610100604052600361ffff1660c09061ffff1660f01b815250620186a063ffffffff1660e09063ffffffff1660e01b8152503480156200003e57600080fd5b506040516200344e3803806200344e8339818101604052810190620000649190620003df565b828073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050620000b460046200022160201b620014d51760201c565b620000c96000801b336200023760201b60201c565b620000fb7faba526aa14aa019b3e9fc425fcea908c5483c11b6e4c89de392165936eeef19d336200023760201b60201c565b6200012d7f9da416cc6ebbbfd2882d16e0e182d3973d28c8cb8c4dda745ee5d41218892f4d336200023760201b60201c565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508367ffffffffffffffff1660a08167ffffffffffffffff1660c01b815250508460068190555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050506200050c565b6001816000016000828254019250508190555050565b6200024982826200032860201b60201c565b6200032457600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620002c96200039260201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600081519050620003ab81620004be565b92915050565b600081519050620003c281620004d8565b92915050565b600081519050620003d981620004f2565b92915050565b600080600080600060a08688031215620003fe57620003fd620004b9565b5b60006200040e88828901620003b1565b95505060206200042188828901620003c8565b945050604062000434888289016200039a565b935050606062000447888289016200039a565b92505060806200045a888289016200039a565b9150509295509295909350565b6000620004748262000485565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600080fd5b620004c98162000467565b8114620004d557600080fd5b50565b620004e3816200047b565b8114620004ef57600080fd5b50565b620004fd81620004a5565b81146200050957600080fd5b50565b60805160601c60a05160c01c60c05160f01c60e05160e01c612ef56200055960003960006113a60152600061138501526000611364015260008181610839015261088d0152612ef56000f3fe6080604052600436106101095760003560e01c806391d1485411610095578063d33f19cb11610064578063d33f19cb14610363578063d547741f1461038c578063e89e106a146103b5578063f737d21d146103e0578063f7b4649e1461040957610109565b806391d14854146102b6578063a217fddf146102f3578063ade328771461031e578063c6bec93a1461034757610109565b80632f2ff15d116100dc5780632f2ff15d146101cd57806336568abe146101f65780633677bc071461021f5780635fbd3f3d146102625780636cc699971461028b57610109565b806301ffc9a71461010e5780631b7052b21461014b5780631fe543e314610167578063248a9ca314610190575b600080fd5b34801561011a57600080fd5b50610135600480360381019061013091906121bd565b610432565b604051610142919061269a565b60405180910390f35b610165600480360381019061016091906122a0565b6104ac565b005b34801561017357600080fd5b5061018e60048036038101906101899190612244565b610837565b005b34801561019c57600080fd5b506101b760048036038101906101b29190612150565b6108f7565b6040516101c491906126b5565b60405180910390f35b3480156101d957600080fd5b506101f460048036038101906101ef919061217d565b610916565b005b34801561020257600080fd5b5061021d6004803603810190610218919061217d565b610937565b005b34801561022b57600080fd5b50610246600480360381019061024191906121ea565b6109ba565b6040516102599796959493929190612602565b60405180910390f35b34801561026e57600080fd5b5061028960048036038101906102849190611f79565b610a8e565b005b34801561029757600080fd5b506102a0610af4565b6040516102ad9190612678565b60405180910390f35b3480156102c257600080fd5b506102dd60048036038101906102d8919061217d565b610ba0565b6040516102ea919061269a565b60405180910390f35b3480156102ff57600080fd5b50610308610c0a565b60405161031591906126b5565b60405180910390f35b34801561032a57600080fd5b5061034560048036038101906103409190611f79565b610c11565b005b610361600480360381019061035c91906121ea565b610c77565b005b34801561036f57600080fd5b5061038a60048036038101906103859190611f79565b610e16565b005b34801561039857600080fd5b506103b360048036038101906103ae919061217d565b610e51565b005b3480156103c157600080fd5b506103ca610e72565b6040516103d791906127bc565b60405180910390f35b3480156103ec57600080fd5b50610407600480360381019061040291906121ea565b610e78565b005b34801561041557600080fd5b50610430600480360381019061042b9190611f79565b61149a565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104a557506104a4826114eb565b5b9050919050565b6000806000806000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166392e845f68a6040518263ffffffff1660e01b815260040161051291906127bc565b60006040518083038186803b15801561052a57600080fd5b505afa15801561053e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105679190611fd3565b965096509650965096509650965080156105ad576040517fc89f1e0800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638a0ab2136040518163ffffffff1660e01b815260040160206040518083038186803b15801561061657600080fd5b505afa15801561062a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064e9190612217565b6106589190612a68565b341015610691576040517f3c1d3de600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8881101561082b576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638a0ab2136040518163ffffffff1660e01b815260040160206040518083038186803b15801561070657600080fd5b505afa15801561071a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073e9190612217565b8661074991906129e1565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ef037c338c83336040518463ffffffff1660e01b81526004016107aa93929190612889565b600060405180830381600087803b1580156107c457600080fd5b505af11580156107d8573d6000803e3d6000fd5b505050507f5dac43247c7247837bb97f4140d16d266918ddaa501aa7780cb7f1a9009a72c68b338360405161080f93929190612800565b60405180910390a150808061082390612c24565b915050610694565b50505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108e957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016108e09291906125d9565b60405180910390fd5b6108f38282611555565b5050565b6000806000838152602001908152602001600020600101549050919050565b61091f826108f7565b61092881611832565b6109328383611846565b505050565b61093f611926565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146109ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a39061279c565b60405180910390fd5b6109b6828261192e565b5050565b6000806000806060600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166392e845f6896040518263ffffffff1660e01b8152600401610a2091906127bc565b60006040518083038186803b158015610a3857600080fd5b505afa158015610a4c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a759190611fd3565b9650965096509650965096509650919395979092949650565b7faba526aa14aa019b3e9fc425fcea908c5483c11b6e4c89de392165936eeef19d610ab881611832565b6000801b610ac581611832565b610aef7f9da416cc6ebbbfd2882d16e0e182d3973d28c8cb8c4dda745ee5d41218892f4d84611846565b505050565b6060600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636cc699976040518163ffffffff1660e01b815260040160006040518083038186803b158015610b5e57600080fd5b505afa158015610b72573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b9b91906120da565b905090565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b7faba526aa14aa019b3e9fc425fcea908c5483c11b6e4c89de392165936eeef19d610c3b81611832565b6000801b610c4881611832565b610c727f9da416cc6ebbbfd2882d16e0e182d3973d28c8cb8c4dda745ee5d41218892f4d8461192e565b505050565b7f9da416cc6ebbbfd2882d16e0e182d3973d28c8cb8c4dda745ee5d41218892f4d610ca181611832565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ca0575b7610ce96004611a0f565b336040518363ffffffff1660e01b8152600401610d079291906127d7565b600060405180830381600087803b158015610d2157600080fd5b505af1158015610d35573d6000803e3d6000fd5b50505050610d4360046114d5565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a0ede5a4836040518263ffffffff1660e01b8152600401610d9e91906127bc565b600060405180830381600087803b158015610db857600080fd5b505af1158015610dcc573d6000803e3d6000fd5b505050507f73ac9939c0fae9d35f1ff5450b52cb43bf0601ae6cc29f9d7eb5967b91e75059610dfb6004611a0f565b33604051610e0a9291906127d7565b60405180910390a15050565b6000801b610e2381611832565b610e4d7f9da416cc6ebbbfd2882d16e0e182d3973d28c8cb8c4dda745ee5d41218892f4d83611846565b5050565b610e5a826108f7565b610e6381611832565b610e6d838361192e565b505050565b60075481565b7f9da416cc6ebbbfd2882d16e0e182d3973d28c8cb8c4dda745ee5d41218892f4d610ea281611832565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cc251829836040518263ffffffff1660e01b8152600401610efd91906127bc565b60206040518083038186803b158015610f1557600080fd5b505afa158015610f29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4d9190612123565b15610f84576040517f586abc5a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a87cc7c7846040518263ffffffff1660e01b8152600401610ff691906127bc565b60206040518083038186803b15801561100e57600080fd5b505afa158015611022573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110469190611fa6565b73ffffffffffffffffffffffffffffffffffffffff1614611093576040517fb7f74a8800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a646daf6846040518263ffffffff1660e01b81526004016110f091906127bc565b60006040518083038186803b15801561110857600080fd5b505afa15801561111c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111459190612091565b905060018151141561132157600073ffffffffffffffffffffffffffffffffffffffff168160008151811061117d5761117c612cfc565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156111d3576040517f6abe6f6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a5676fd88460006040518363ffffffff1660e01b8152600401611231929190612837565b600060405180830381600087803b15801561124b57600080fd5b505af115801561125f573d6000803e3d6000fd5b505050508060008151811061127757611276612cfc565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156112c4573d6000803e3d6000fd5b507f8981fdd74bd05da9ef8f2aeb472f541ee871b1e9e3908c19d01a9bf51ce5f7ab600084836000815181106112fd576112fc612cfc565b5b602002602001015160405161131493929190612723565b60405180910390a1611495565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d306006547f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016113e79594939291906126d0565b602060405180830381600087803b15801561140157600080fd5b505af1158015611415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114399190612217565b60078190555082600560006007548152602001908152602001600020819055507f3d94fecedaa4f90b8bd459797adb95f5bb11426025c5541390d9ccc1ad1b60a16007548460405161148c929190612860565b60405180910390a15b505050565b6000801b6114a781611832565b6114d17f9da416cc6ebbbfd2882d16e0e182d3973d28c8cb8c4dda745ee5d41218892f4d8361192e565b5050565b6001816000016000828254019250508190555050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000600560008481526020019081526020016000205490506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a646daf6836040518263ffffffff1660e01b81526004016115ca91906127bc565b60006040518083038186803b1580156115e257600080fd5b505afa1580156115f6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061161f9190612091565b9050600061165282518560008151811061163c5761163b612cfc565b5b6020026020010151611a1d90919063ffffffff16565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a5676fd884836040518363ffffffff1660e01b81526004016116b1929190612860565b600060405180830381600087803b1580156116cb57600080fd5b505af11580156116df573d6000803e3d6000fd5b5050505060056000868152602001908152602001600020600090556000606460504761170b9190612a68565b6117159190612a37565b9050600083838151811061172c5761172b612cfc565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16826040516117579061258a565b60006040518083038185875af1925050503d8060008114611794576040519150601f19603f3d011682016040523d82523d6000602084013e611799565b606091505b50509050806117d4576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f8981fdd74bd05da9ef8f2aeb472f541ee871b1e9e3908c19d01a9bf51ce5f7ab878686868151811061180a57611809612cfc565b5b602002602001015160405161182193929190612889565b60405180910390a150505050505050565b6118438161183e611926565b611a33565b50565b6118508282610ba0565b61192257600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506118c7611926565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6119388282610ba0565b15611a0b57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506119b0611926565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600081600001549050919050565b60008183611a2b9190612c6d565b905092915050565b611a3d8282610ba0565b611acc57611a628173ffffffffffffffffffffffffffffffffffffffff166014611ad0565b611a708360001c6020611ad0565b604051602001611a8192919061259f565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac3919061275a565b60405180910390fd5b5050565b606060006002836002611ae39190612a68565b611aed91906129e1565b67ffffffffffffffff811115611b0657611b05612d2b565b5b6040519080825280601f01601f191660200182016040528015611b385781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611b7057611b6f612cfc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611bd457611bd3612cfc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611c149190612a68565b611c1e91906129e1565b90505b6001811115611cbe577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611c6057611c5f612cfc565b5b1a60f81b828281518110611c7757611c76612cfc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611cb790612bc9565b9050611c21565b5060008414611d02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf99061277c565b60405180910390fd5b8091505092915050565b6000611d1f611d1a846128e5565b6128c0565b90508083825260208201905082856020860282011115611d4257611d41612d5f565b5b60005b85811015611d725781611d588882611e71565b845260208401935060208301925050600181019050611d45565b5050509392505050565b6000611d8f611d8a84612911565b6128c0565b90508083825260208201905082856020860282011115611db257611db1612d5f565b5b60005b85811015611de25781611dc88882611f4f565b845260208401935060208301925050600181019050611db5565b5050509392505050565b6000611dff611dfa84612911565b6128c0565b90508083825260208201905082856020860282011115611e2257611e21612d5f565b5b60005b85811015611e525781611e388882611f64565b845260208401935060208301925050600181019050611e25565b5050509392505050565b600081359050611e6b81612e4c565b92915050565b600081519050611e8081612e4c565b92915050565b600082601f830112611e9b57611e9a612d5a565b5b8151611eab848260208601611d0c565b91505092915050565b600082601f830112611ec957611ec8612d5a565b5b8135611ed9848260208601611d7c565b91505092915050565b600082601f830112611ef757611ef6612d5a565b5b8151611f07848260208601611dec565b91505092915050565b600081519050611f1f81612e63565b92915050565b600081359050611f3481612e7a565b92915050565b600081359050611f4981612e91565b92915050565b600081359050611f5e81612ea8565b92915050565b600081519050611f7381612ea8565b92915050565b600060208284031215611f8f57611f8e612d69565b5b6000611f9d84828501611e5c565b91505092915050565b600060208284031215611fbc57611fbb612d69565b5b6000611fca84828501611e71565b91505092915050565b600080600080600080600060e0888a031215611ff257611ff1612d69565b5b60006120008a828b01611e71565b97505060206120118a828b01611f64565b96505060406120228a828b01611f64565b95505060606120338a828b01611f64565b945050608088015167ffffffffffffffff81111561205457612053612d64565b5b6120608a828b01611e86565b93505060a06120718a828b01611e71565b92505060c06120828a828b01611f10565b91505092959891949750929550565b6000602082840312156120a7576120a6612d69565b5b600082015167ffffffffffffffff8111156120c5576120c4612d64565b5b6120d184828501611e86565b91505092915050565b6000602082840312156120f0576120ef612d69565b5b600082015167ffffffffffffffff81111561210e5761210d612d64565b5b61211a84828501611ee2565b91505092915050565b60006020828403121561213957612138612d69565b5b600061214784828501611f10565b91505092915050565b60006020828403121561216657612165612d69565b5b600061217484828501611f25565b91505092915050565b6000806040838503121561219457612193612d69565b5b60006121a285828601611f25565b92505060206121b385828601611e5c565b9150509250929050565b6000602082840312156121d3576121d2612d69565b5b60006121e184828501611f3a565b91505092915050565b600060208284031215612200576121ff612d69565b5b600061220e84828501611f4f565b91505092915050565b60006020828403121561222d5761222c612d69565b5b600061223b84828501611f64565b91505092915050565b6000806040838503121561225b5761225a612d69565b5b600061226985828601611f4f565b925050602083013567ffffffffffffffff81111561228a57612289612d64565b5b61229685828601611eb4565b9150509250929050565b600080604083850312156122b7576122b6612d69565b5b60006122c585828601611f4f565b92505060206122d685828601611f4f565b9150509250929050565b60006122ec8383612310565b60208301905092915050565b6000612304838361254e565b60208301905092915050565b61231981612ac2565b82525050565b61232881612ac2565b82525050565b60006123398261295d565b6123438185612998565b935061234e8361293d565b8060005b8381101561237f57815161236688826122e0565b97506123718361297e565b925050600181019050612352565b5085935050505092915050565b600061239782612968565b6123a181856129a9565b93506123ac8361294d565b8060005b838110156123dd5781516123c488826122f8565b97506123cf8361298b565b9250506001810190506123b0565b5085935050505092915050565b6123f381612ad4565b82525050565b61240281612ae0565b82525050565b61241181612b72565b82525050565b61242081612b84565b82525050565b600061243182612973565b61243b81856129c5565b935061244b818560208601612b96565b61245481612d6e565b840191505092915050565b600061246a82612973565b61247481856129d6565b9350612484818560208601612b96565b80840191505092915050565b600061249d6020836129c5565b91506124a882612d7f565b602082019050919050565b60006124c06000836129ba565b91506124cb82612da8565b600082019050919050565b60006124e36017836129d6565b91506124ee82612dab565b601782019050919050565b60006125066011836129d6565b915061251182612dd4565b601182019050919050565b6000612529602f836129c5565b915061253482612dfd565b604082019050919050565b61254881612b16565b82525050565b61255781612b44565b82525050565b61256681612b44565b82525050565b61257581612b4e565b82525050565b61258481612b5e565b82525050565b6000612595826124b3565b9150819050919050565b60006125aa826124d6565b91506125b6828561245f565b91506125c1826124f9565b91506125cd828461245f565b91508190509392505050565b60006040820190506125ee600083018561231f565b6125fb602083018461231f565b9392505050565b600060e082019050612617600083018a61231f565b612624602083018961255d565b612631604083018861255d565b61263e606083018761255d565b8181036080830152612650818661232e565b905061265f60a083018561231f565b61266c60c08301846123ea565b98975050505050505050565b60006020820190508181036000830152612692818461238c565b905092915050565b60006020820190506126af60008301846123ea565b92915050565b60006020820190506126ca60008301846123f9565b92915050565b600060a0820190506126e560008301886123f9565b6126f2602083018761257b565b6126ff604083018661253f565b61270c606083018561256c565b6127196080830184612417565b9695505050505050565b60006060820190506127386000830186612408565b612745602083018561255d565b612752604083018461231f565b949350505050565b600060208201905081810360008301526127748184612426565b905092915050565b6000602082019050818103600083015261279581612490565b9050919050565b600060208201905081810360008301526127b58161251c565b9050919050565b60006020820190506127d1600083018461255d565b92915050565b60006040820190506127ec600083018561255d565b6127f9602083018461231f565b9392505050565b6000606082019050612815600083018661255d565b612822602083018561231f565b61282f604083018461255d565b949350505050565b600060408201905061284c600083018561255d565b6128596020830184612408565b9392505050565b6000604082019050612875600083018561255d565b612882602083018461255d565b9392505050565b600060608201905061289e600083018661255d565b6128ab602083018561255d565b6128b8604083018461231f565b949350505050565b60006128ca6128db565b90506128d68282612bf3565b919050565b6000604051905090565b600067ffffffffffffffff821115612900576128ff612d2b565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561292c5761292b612d2b565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006129ec82612b44565b91506129f783612b44565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612a2c57612a2b612c9e565b5b828201905092915050565b6000612a4282612b44565b9150612a4d83612b44565b925082612a5d57612a5c612ccd565b5b828204905092915050565b6000612a7382612b44565b9150612a7e83612b44565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612ab757612ab6612c9e565b5b828202905092915050565b6000612acd82612b24565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000612b7d82612b44565b9050919050565b6000612b8f82612b4e565b9050919050565b60005b83811015612bb4578082015181840152602081019050612b99565b83811115612bc3576000848401525b50505050565b6000612bd482612b44565b91506000821415612be857612be7612c9e565b5b600182039050919050565b612bfc82612d6e565b810181811067ffffffffffffffff82111715612c1b57612c1a612d2b565b5b80604052505050565b6000612c2f82612b44565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612c6257612c61612c9e565b5b600182019050919050565b6000612c7882612b44565b9150612c8383612b44565b925082612c9357612c92612ccd565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b50565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b612e5581612ac2565b8114612e6057600080fd5b50565b612e6c81612ad4565b8114612e7757600080fd5b50565b612e8381612ae0565b8114612e8e57600080fd5b50565b612e9a81612aea565b8114612ea557600080fd5b50565b612eb181612b44565b8114612ebc57600080fd5b5056fea2646970667358221220a4c975c8161b1c29da075637754ff6b9b0cd00885771644607c398fa521819f364736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 266,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)261_storage)"
      },
      {
        "astId": 1297,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "COORDINATOR",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(VRFCoordinatorV2Interface)241"
      },
      {
        "astId": 1300,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "LINKTOKEN",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)152"
      },
      {
        "astId": 1303,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "LOTTERY_DATA",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(LotteryData)2280"
      },
      {
        "astId": 1323,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lotteryId",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)662_storage"
      },
      {
        "astId": 1327,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lotteryRandomnessRequest",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1329,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "keyHash",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 1339,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_requestId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(LinkTokenInterface)152": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryData)2280": {
        "encoding": "inplace",
        "label": "contract LotteryData",
        "numberOfBytes": "20"
      },
      "t_contract(VRFCoordinatorV2Interface)241": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)261_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)261_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Counter)662_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 661,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)261_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 258,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 260,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}